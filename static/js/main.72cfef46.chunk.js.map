{"version":3,"sources":["components/Nav.tsx","utils/db.ts","utils/app-context.ts","components/AppList/AppList.tsx","components/CreateApp/CreateAppDialog.tsx","components/Home/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useAppBarStyles","makeStyles","theme","root","padding","spacing","Nav","appBarClasses","AppBar","classes","color","elevation","position","Typography","variant","dbPromise","openDB","upgrade","db","createObjectStore","keyPath","Applications","app","console","log","tx","transaction","objectStore","add","openCursor","cursor","applications","push","value","continue","AppContext","createContext","apps","inProgress","create","update","id","payload","delete","useAppContext","useContext","useAppState","useState","setInProgress","setApps","useEffect","then","allApps","useAppIDB","useCallback","decoratedApp","uuidv4","createdTimestamp","Date","toISOString","decorateCreatedApp","produce","appList","appIndex","findIndex","splice","AppListBody","length","TableBody","TableRow","TableCell","colSpan","map","key","title","company","location","url","AppList","TableContainer","Table","TableHead","useTextFieldStyles","width","useFormInputState","defaultValue","setValue","onChange","event","eventValue","target","clearField","CreateAppDialog","open","closeDialog","textFieldClasses","appDialogFields","description","clearFields","Object","values","createApplication","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","TextField","label","autoFocus","fullWidth","margin","Box","display","justifyContent","rows","multiline","DialogActions","Button","onClick","useContainerStyles","paddingTop","HomePage","setOpen","openDialog","useDialogControls","containerClasses","Container","mb","align","disableElevation","size","Wrangl","appState","Provider","Boolean","window","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uOAGMA,EAAkBC,aAAW,SAACC,GAAD,MAAY,CAC7CC,KAAM,CACJC,QAAQ,GAAD,OAAKF,EAAMG,QAAQ,GAAnB,cAA2BH,EAAMG,QAAQ,GAAzC,WAIJ,SAASC,IACd,IAAMC,EAAgBP,IACtB,OACE,kBAACQ,EAAA,EAAD,CACEC,QAASF,EACTG,MAAM,cACNC,UAAW,EACXC,SAAS,UAET,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,W,+JCdAC,EAAYC,YAAO,SAAU,EAAG,CACpCC,QADoC,SAC5BC,GACNA,EAAGC,kBAAkB,eAAgB,CACnCC,QAAS,UAKFC,EAAe,SACbC,GAAW,OAAD,4HACJP,EADI,cACfG,EADe,OAGrBK,QAAQC,IAAI,gBAENC,EAAKP,EAAGQ,YAAY,eAAgB,aALrB,SAOfD,EAAGE,YAAY,gBAAgBC,IAAIN,GAPpB,8CADZD,EAAe,WAUE,OAAD,gIACRN,EADQ,cACnBG,EADmB,OAGzBK,QAAQC,IAAI,qBAENC,EAAKP,EAAGQ,YAAY,eAAgB,YALjB,SAOND,EAAGE,YAAY,gBAAgBE,aAPzB,OAOrBC,EAPqB,OASrBC,EAAe,GATM,WAWlBD,EAXkB,wBAYvBC,EAAaC,KAAKF,EAAOG,OAZF,UAaRH,EAAOI,WAbC,QAavBJ,EAbuB,uDAgBlBC,GAhBkB,+CCItB,IAAMI,EAAaC,wBAAc,CACtCC,KAAM,GACNC,YAAY,EACZC,OAAQ,SAACjB,KACTkB,OAAQ,SAACC,EAAYC,KACrBC,OAAQ,SAACF,OAGJ,SAASG,IACd,OAAOC,qBAAWV,GAiBb,SAASW,IAAoD,IAAD,EAdnE,WAAsB,IAAD,EACiBC,oBAAS,GAD1B,mBACZT,EADY,KACAU,EADA,OAEKD,mBAAS,IAFd,mBAEZV,EAFY,KAENY,EAFM,KAWnB,OAPAC,qBAAU,WACR7B,IAAkC8B,MAAK,SAACC,GACtCH,EAAQG,GACRJ,GAAc,QAEf,CAACC,EAASD,IAEN,CAAEX,OAAMC,aAAYW,WAIWI,GAA9BhB,EADyD,EACzDA,KAAMC,EADmD,EACnDA,WAAYW,EADuC,EACvCA,QAqC1B,MAAO,CACLZ,OACAC,aACAC,OAtCgBe,uBAChB,SAAChC,GACC,IAAMiC,EAvCZ,SAA4BjC,GAC1B,OAAO,eACFA,EADL,CAEEmB,GAAIe,cACJC,kBAAkB,IAAIC,MAAOC,gBAmCNC,CAAmBtC,GACxC2B,GAAQ,SAACZ,GAAD,4BAAcA,GAAd,CAAoBkB,OAC5B,IACElC,EAAoBkC,GACpB,aAEJ,CAACN,IA+BDT,OA5BgBc,uBAChB,SAACb,EAAYnB,GACX2B,GAAQ,SAACZ,GAAD,OACNwB,YAAQxB,GAAM,SAACyB,GACb,IAAMC,EAAWD,EAAQE,WAAU,SAAC1C,GAAD,OAASA,EAAImB,KAAOA,KACvDqB,EAAQC,GAAYzC,UAI1B,CAAC2B,IAoBDN,OAjBgBW,uBAChB,SAACb,GACCQ,GAAQ,SAACZ,GAAD,OACNwB,YAAQxB,GAAM,SAACyB,GACb,IAAMC,EAAWD,EAAQE,WAAU,SAAC1C,GAAD,OAASA,EAAImB,KAAOA,KACvDqB,EAAQG,OAAOF,EAAU,WAI/B,CAACd,KCzEL,SAASiB,EAAT,GAA8D,IAAvC7B,EAAsC,EAAtCA,KAGrB,OAAoB,IAAhBA,EAAK8B,OAEL,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,QANA,GAMX,+CASN,kBAACH,EAAA,EAAD,KACG/B,EAAKmC,KAAI,SAAClD,GAAD,OACR,kBAAC+C,EAAA,EAAD,CAAUI,IAAKnD,EAAImB,IACjB,kBAAC6B,EAAA,EAAD,KAAYhD,EAAIoD,OAChB,kBAACJ,EAAA,EAAD,KAAYhD,EAAIqD,SAChB,kBAACL,EAAA,EAAD,KAAYhD,EAAIsD,UAChB,kBAACN,EAAA,EAAD,KAAYhD,EAAIuD,UAOnB,SAASC,IAAW,IACjBzC,EAASO,IAATP,KACR,OACE,kBAAC0C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,cAGJ,kBAACJ,EAAD,CAAa7B,KAAMA,M,0DCpCrB6C,EAAqBjF,aAAW,SAACC,GAAD,MAAY,CAChDC,KAAM,CACJgF,MAAM,cAAD,OAAgBjF,EAAMG,QAAQ,GAA9B,YAIT,SAAS+E,IAAsC,IAApBC,EAAmB,uDAAJ,GAAI,EAClBtC,mBAASsC,GADS,mBACrCpD,EADqC,KAC9BqD,EAD8B,KAGtCC,EAAWjC,uBACf,SAACkC,GACC,IAAMC,EAAaD,EAAME,OAAOzD,MAChCqD,GAAS,kBAAMG,OAEjB,CAACH,IAGGK,EAAarC,uBAAY,kBAAMgC,GAAS,iBAAM,QAAK,CAACA,IAE1D,MAAO,CAAErD,QAAOsD,WAAUI,cAarB,SAASC,EAAT,GAAuE,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,YAC9BvD,EAAWK,IAAXL,OACFwD,EAAmBb,IACnBc,EAZC,CACLtB,MAAOU,IACPT,QAASS,IACTR,SAAUQ,IACVP,IAAKO,IACLa,YAAab,KASPV,EAA+CsB,EAA/CtB,MAAOC,EAAwCqB,EAAxCrB,QAASC,EAA+BoB,EAA/BpB,SAAUC,EAAqBmB,EAArBnB,IAAKoB,EAAgBD,EAAhBC,YAEjCC,EAAc5C,uBAAY,WAC9B,cAAoB6C,OAAOC,OAAOJ,GAAlC,eAAoD,CAApC,KACRL,gBAEP,CAACK,IAEEK,EAAoB/C,uBAAY,WACpCf,EAAO,CACLmC,MAAOA,EAAMzC,MACb0C,QAASA,EAAQ1C,MACjB2C,SAAUA,EAAS3C,MACnB4C,IAAKA,EAAI5C,MACTgE,YAAaA,EAAYhE,QAE3B6D,IACAI,MACC,CACD3D,EACAuD,EACAI,EACAxB,EAAMzC,MACN0C,EAAQ1C,MACR2C,EAAS3C,MACT4C,EAAI5C,MACJgE,EAAYhE,QAGd,OACE,kBAACqE,EAAA,EAAD,CACET,KAAMA,EACNU,QAAST,EACTU,kBAAgB,wBAChBC,mBAAiB,wBAEjB,kBAACC,EAAA,EAAD,CAAajE,GAAG,yBAAhB,uBACA,kBAACkE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAmBnE,GAAG,wBAAtB,2EAIA,kBAACoE,EAAA,EAAD,eACEC,MAAM,YACNhG,QAAQ,WACRiG,WAAS,EACTC,WAAS,EACTC,OAAO,SACHvC,IAEN,kBAACwC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,eAAe,iBACjC,kBAACP,EAAA,EAAD,eACEpG,QAASsF,EACTe,MAAM,UACNhG,QAAQ,WACRmG,OAAO,SACHtC,IAEN,kBAACkC,EAAA,EAAD,eACEpG,QAASsF,EACTe,MAAM,WACNhG,QAAQ,WACRmG,OAAO,SACHrC,KAGR,kBAACiC,EAAA,EAAD,eACEC,MAAM,MACNhG,QAAQ,WACRmG,OAAO,QACPD,WAAS,GACLnC,IAEN,kBAACgC,EAAA,EAAD,eACEC,MAAM,cACNhG,QAAQ,WACRmG,OAAO,SACPI,KAAM,EACNC,WAAS,EACTN,WAAS,GACLf,KAGR,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQ9G,MAAM,YAAYI,QAAQ,YAAY2G,QAAS3B,GAAvD,UAGA,kBAAC0B,EAAA,EAAD,CAAQ9G,MAAM,UAAUI,QAAQ,YAAY2G,QAASpB,GAArD,WClIR,IAAMqB,EAAqBzH,aAAW,SAACC,GAAD,MAAY,CAChDC,KAAM,CACJwH,WAAYzH,EAAMG,QAAQ,SAIvB,SAASuH,IAAY,IAAD,EDoIpB,WAA8B,IAAD,EACV7E,oBAAS,GADC,mBAC3B8C,EAD2B,KACrBgC,EADqB,KAMlC,MAAO,CAAEhC,OAAMiC,WAHIxE,uBAAY,kBAAMuE,GAAQ,KAAO,CAACA,IAG1B/B,YAFPxC,uBAAY,kBAAMuE,GAAQ,KAAQ,CAACA,KCvIbE,GAAlClC,EADiB,EACjBA,KAAMiC,EADW,EACXA,WAAYhC,EADD,EACCA,YACpBkC,EAAmBN,IACzB,OACE,kBAACO,EAAA,EAAD,CAAWxH,QAASuH,GAClB,kBAACd,EAAA,EAAD,CAAKgB,GAAI,GACP,kBAAChB,EAAA,EAAD,CAAKgB,GAAI,GACP,kBAACrH,EAAA,EAAD,CAAYsH,MAAM,SAASrH,QAAQ,MAAnC,6BAIF,kBAACD,EAAA,EAAD,CAAYsH,MAAM,SAASrH,QAAQ,SAAnC,+DAIF,kBAACoG,EAAA,EAAD,CAAKC,QAAQ,OAAOC,eAAe,SAASc,GAAI,IAC9C,kBAACV,EAAA,EAAD,CACEY,kBAAgB,EAChB1H,MAAM,UACNI,QAAQ,YACRuH,KAAK,QACLZ,QAASK,GALX,4BAUF,kBAAChD,EAAD,MACA,kBAACc,EAAD,CAAiBC,KAAMA,EAAMC,YAAaA,KC/BjCwC,MAVf,WACE,IAAMC,EAAWzF,IACjB,OACE,kBAACX,EAAWqG,SAAZ,CAAqBvG,MAAOsG,GAC1B,kBAACjI,EAAD,MACA,kBAACsH,EAAD,QCCca,QACW,cAA7BC,OAAO9D,SAAS+D,UAEe,UAA7BD,OAAO9D,SAAS+D,UAEhBD,OAAO9D,SAAS+D,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlG,MAAK,SAAAmG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlI,QAAQkI,MAAMA,EAAMC,c","file":"static/js/main.72cfef46.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Typography, makeStyles } from \"@material-ui/core\";\n\nconst useAppBarStyles = makeStyles((theme) => ({\n  root: {\n    padding: `${theme.spacing(1)}px ${theme.spacing(2)}px`,\n  },\n}));\n\nexport function Nav() {\n  const appBarClasses = useAppBarStyles();\n  return (\n    <AppBar\n      classes={appBarClasses}\n      color=\"transparent\"\n      elevation={0}\n      position=\"sticky\"\n    >\n      <Typography variant=\"h5\">wrangl</Typography>\n    </AppBar>\n  );\n}\n","import { openDB } from \"idb\";\n\nimport { App } from \"../types/App\";\n\nconst dbPromise = openDB(\"Wrangl\", 1, {\n  upgrade(db) {\n    db.createObjectStore(\"applications\", {\n      keyPath: \"id\",\n    });\n  },\n});\n\nexport const Applications = {\n  async create(app: App) {\n    const db = await dbPromise;\n\n    console.log(\"Creating app\");\n\n    const tx = db.transaction(\"applications\", \"readwrite\");\n\n    await tx.objectStore(\"applications\").add(app);\n  },\n  async getAllApplications() {\n    const db = await dbPromise;\n\n    console.log(\"Fetching all apps\");\n\n    const tx = db.transaction(\"applications\", \"readonly\");\n\n    let cursor = await tx.objectStore(\"applications\").openCursor();\n\n    let applications = [];\n\n    while (cursor) {\n      applications.push(cursor.value);\n      cursor = await cursor.continue();\n    }\n\n    return applications as ReadonlyArray<App>;\n  },\n};\n","import { produce } from \"immer\";\nimport {\n  createContext,\n  useContext,\n  useState,\n  useCallback,\n  useEffect,\n  Context,\n} from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { App } from \"../types/App\";\nimport { Applications } from \"./db\";\n\ntype ContextExtractor<C> = C extends Context<infer O> ? O : never;\n\ntype AppWithoutGeneratedData = Omit<App, \"createdTimestamp\" | \"id\">;\n\nfunction decorateCreatedApp(app: AppWithoutGeneratedData): App {\n  return {\n    ...app,\n    id: uuidv4(),\n    createdTimestamp: new Date().toISOString(),\n  };\n}\n\nexport const AppContext = createContext({\n  apps: [] as ReadonlyArray<App>,\n  inProgress: true,\n  create: (app: AppWithoutGeneratedData) => {},\n  update: (id: string, payload: App) => {},\n  delete: (id: string) => {},\n});\n\nexport function useAppContext() {\n  return useContext(AppContext);\n}\n\nfunction useAppIDB() {\n  const [inProgress, setInProgress] = useState(true);\n  const [apps, setApps] = useState([] as ReadonlyArray<App>);\n\n  useEffect(() => {\n    Applications.getAllApplications().then((allApps) => {\n      setApps(allApps);\n      setInProgress(false);\n    });\n  }, [setApps, setInProgress]);\n\n  return { apps, inProgress, setApps };\n}\n\nexport function useAppState(): ContextExtractor<typeof AppContext> {\n  const { apps, inProgress, setApps } = useAppIDB();\n\n  const createApp = useCallback(\n    (app: AppWithoutGeneratedData) => {\n      const decoratedApp = decorateCreatedApp(app);\n      setApps((apps) => [...apps, decoratedApp]);\n      try {\n        Applications.create(decoratedApp);\n      } catch {}\n    },\n    [setApps]\n  );\n\n  const updateApp = useCallback(\n    (id: string, app: App) => {\n      setApps((apps) =>\n        produce(apps, (appList) => {\n          const appIndex = appList.findIndex((app) => app.id === id);\n          appList[appIndex] = app;\n        })\n      );\n    },\n    [setApps]\n  );\n\n  const deleteApp = useCallback(\n    (id: string) => {\n      setApps((apps) =>\n        produce(apps, (appList) => {\n          const appIndex = appList.findIndex((app) => app.id === id);\n          appList.splice(appIndex, 1);\n        })\n      );\n    },\n    [setApps]\n  );\n\n  return {\n    apps,\n    inProgress,\n    create: createApp,\n    update: updateApp,\n    delete: deleteApp,\n  };\n}\n","import React from \"react\";\n\nimport {\n  TableContainer,\n  Table,\n  TableRow,\n  TableHead,\n  TableBody,\n  TableCell,\n} from \"@material-ui/core\";\n\nimport { useAppContext } from \"../../utils/app-context\";\nimport { App } from \"../../types/App\";\n\nfunction AppListBody({ apps }: { apps: ReadonlyArray<App> }) {\n  const numColumns = 4;\n\n  if (apps.length === 0) {\n    return (\n      <TableBody>\n        <TableRow>\n          <TableCell colSpan={numColumns}>\n            You have not tracked any applications yet\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    );\n  }\n\n  return (\n    <TableBody>\n      {apps.map((app) => (\n        <TableRow key={app.id}>\n          <TableCell>{app.title}</TableCell>\n          <TableCell>{app.company}</TableCell>\n          <TableCell>{app.location}</TableCell>\n          <TableCell>{app.url}</TableCell>\n        </TableRow>\n      ))}\n    </TableBody>\n  );\n}\n\nexport function AppList() {\n  const { apps } = useAppContext();\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Job Title</TableCell>\n            <TableCell>Company</TableCell>\n            <TableCell>Location</TableCell>\n            <TableCell>URL</TableCell>\n          </TableRow>\n        </TableHead>\n        <AppListBody apps={apps}></AppListBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React, { useCallback, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  TextField,\n  makeStyles,\n} from \"@material-ui/core\";\n\nimport { useAppContext } from \"../../utils/app-context\";\n\ntype CreateAppDialogProps = {\n  open: boolean;\n  closeDialog: () => void;\n};\n\nconst useTextFieldStyles = makeStyles((theme) => ({\n  root: {\n    width: `calc(50% - ${theme.spacing(1)}px)`,\n  },\n}));\n\nfunction useFormInputState(defaultValue = \"\") {\n  const [value, setValue] = useState(defaultValue);\n\n  const onChange = useCallback(\n    (event) => {\n      const eventValue = event.target.value;\n      setValue(() => eventValue);\n    },\n    [setValue]\n  );\n\n  const clearField = useCallback(() => setValue(() => \"\"), [setValue]);\n\n  return { value, onChange, clearField };\n}\n\nfunction useAppDialogFields() {\n  return {\n    title: useFormInputState(),\n    company: useFormInputState(),\n    location: useFormInputState(),\n    url: useFormInputState(),\n    description: useFormInputState(),\n  };\n}\n\nexport function CreateAppDialog({ open, closeDialog }: CreateAppDialogProps) {\n  const { create } = useAppContext();\n  const textFieldClasses = useTextFieldStyles();\n  const appDialogFields = useAppDialogFields();\n\n  const { title, company, location, url, description } = appDialogFields;\n\n  const clearFields = useCallback(() => {\n    for (const field of Object.values(appDialogFields)) {\n      field.clearField();\n    }\n  }, [appDialogFields]);\n\n  const createApplication = useCallback(() => {\n    create({\n      title: title.value,\n      company: company.value,\n      location: location.value,\n      url: url.value,\n      description: description.value,\n    });\n    closeDialog();\n    clearFields();\n  }, [\n    create,\n    closeDialog,\n    clearFields,\n    title.value,\n    company.value,\n    location.value,\n    url.value,\n    description.value,\n  ]);\n\n  return (\n    <Dialog\n      open={open}\n      onClose={closeDialog}\n      aria-labelledby=\"create-app-form-title\"\n      aria-describedby=\"create-app-form-desc\"\n    >\n      <DialogTitle id=\"create-app-form-title\">Add new application</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"create-app-form-desc\">\n          Add the details of your job application to start tracking it in the\n          app\n        </DialogContentText>\n        <TextField\n          label=\"Job Title\"\n          variant=\"outlined\"\n          autoFocus\n          fullWidth\n          margin=\"dense\"\n          {...title}\n        ></TextField>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <TextField\n            classes={textFieldClasses}\n            label=\"Company\"\n            variant=\"outlined\"\n            margin=\"dense\"\n            {...company}\n          ></TextField>\n          <TextField\n            classes={textFieldClasses}\n            label=\"Location\"\n            variant=\"outlined\"\n            margin=\"dense\"\n            {...location}\n          ></TextField>\n        </Box>\n        <TextField\n          label=\"URL\"\n          variant=\"outlined\"\n          margin=\"dense\"\n          fullWidth\n          {...url}\n        ></TextField>\n        <TextField\n          label=\"Description\"\n          variant=\"outlined\"\n          margin=\"normal\"\n          rows={4}\n          multiline\n          fullWidth\n          {...description}\n        ></TextField>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"secondary\" variant=\"contained\" onClick={closeDialog}>\n          Cancel\n        </Button>\n        <Button color=\"primary\" variant=\"contained\" onClick={createApplication}>\n          Track\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport function useDialogControls() {\n  const [open, setOpen] = useState(false);\n\n  const openDialog = useCallback(() => setOpen(true), [setOpen]);\n  const closeDialog = useCallback(() => setOpen(false), [setOpen]);\n\n  return { open, openDialog, closeDialog };\n}\n","import React from \"react\";\nimport {\n  Container,\n  makeStyles,\n  Typography,\n  Button,\n  Box,\n} from \"@material-ui/core\";\nimport { AppList } from \"../AppList/AppList\";\nimport {\n  CreateAppDialog,\n  useDialogControls,\n} from \"../CreateApp/CreateAppDialog\";\n\nconst useContainerStyles = makeStyles((theme) => ({\n  root: {\n    paddingTop: theme.spacing(16),\n  },\n}));\n\nexport function HomePage() {\n  const { open, openDialog, closeDialog } = useDialogControls();\n  const containerClasses = useContainerStyles();\n  return (\n    <Container classes={containerClasses}>\n      <Box mb={6}>\n        <Box mb={1}>\n          <Typography align=\"center\" variant=\"h2\">\n            Organize your job search\n          </Typography>\n        </Box>\n        <Typography align=\"center\" variant=\"body1\">\n          Track your applications and receive reminders to follow up\n        </Typography>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\" mb={16}>\n        <Button\n          disableElevation\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={openDialog}\n        >\n          Track your applications\n        </Button>\n      </Box>\n      <AppList />\n      <CreateAppDialog open={open} closeDialog={closeDialog} />\n    </Container>\n  );\n}\n","import React from \"react\";\n\nimport { Nav } from \"./components/Nav\";\nimport { HomePage } from \"./components/Home/HomePage\";\nimport { AppContext, useAppState } from \"./utils/app-context\";\n\nfunction Wrangl() {\n  const appState = useAppState();\n  return (\n    <AppContext.Provider value={appState}>\n      <Nav />\n      <HomePage />\n    </AppContext.Provider>\n  );\n}\n\nexport default Wrangl;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}